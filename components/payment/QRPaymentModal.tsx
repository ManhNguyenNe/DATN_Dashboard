"use client";

import React, { useState, useEffect, useRef } from "react";
import { Modal, Button, Alert, Spinner } from "react-bootstrap";
import { paymentService, PaymentStatusResponse } from "../../services/api";
import { medicalRecordService, type SimpleMedicalRecordCreateData } from "../../services";

interface QRPaymentModalProps {
    show: boolean;
    onHide: () => void;
    qrCodeData: string;
    invoiceId: number;
    orderCode: number;
    onPaymentSuccess: () => void;
    onPaymentError: (error: string) => void;
    // Th√™m d·ªØ li·ªáu c·∫ßn thi·∫øt ƒë·ªÉ t·∫°o phi·∫øu kh√°m
    medicalRecordData?: {
        patientId: number;
        doctorId?: number | undefined;
        healthPlanId?: number | undefined;
        symptoms: string;
    };
}

const QRPaymentModal: React.FC<QRPaymentModalProps> = ({
    show,
    onHide,
    qrCodeData,
    invoiceId,
    orderCode,
    onPaymentSuccess,
    onPaymentError,
    medicalRecordData
}) => {
    const [qrCodeUrl, setQrCodeUrl] = useState<string>("");
    const [paymentStatus, setPaymentStatus] = useState<'checking' | 'success' | 'failed' | 'waiting'>('waiting');
    const [statusMessage, setStatusMessage] = useState<string>("");
    const [countdown, setCountdown] = useState<number>(10);
    const [checkingStarted, setCheckingStarted] = useState<boolean>(false);

    const pollIntervalRef = useRef<NodeJS.Timeout | null>(null);
    const countdownIntervalRef = useRef<NodeJS.Timeout | null>(null);
    const timeoutRef = useRef<NodeJS.Timeout | null>(null);
    const isCheckingRef = useRef<boolean>(false); // Flag ƒë·ªÉ prevent duplicate calls
    const isCompletedRef = useRef<boolean>(false); // Flag ƒë·ªÉ track khi ƒë√£ ho√†n th√†nh (success ho·∫∑c failed)
    const isCreatingRecordRef = useRef<boolean>(false); // Flag ƒë·ªÉ prevent duplicate medical record creation

    // Generate QR code khi component mount ho·∫∑c qrCodeData thay ƒë·ªïi
    useEffect(() => {
        if (qrCodeData && show) {
            generateQRCode(qrCodeData);
            startCountdown();
        }
    }, [qrCodeData, show]);

    // Cleanup intervals khi component unmount ho·∫∑c modal hide
    useEffect(() => {
        if (!show) {
            cleanup();
        }

        return () => {
            cleanup();
        };
    }, [show]);

    const cleanup = () => {
        console.log('üßπ Cleanup called - clearing all intervals and timeouts');

        if (pollIntervalRef.current) {
            clearInterval(pollIntervalRef.current);
            pollIntervalRef.current = null;
            console.log('‚úÖ Cleared payment status polling interval');
        }
        if (countdownIntervalRef.current) {
            clearInterval(countdownIntervalRef.current);
            countdownIntervalRef.current = null;
            console.log('‚úÖ Cleared countdown interval');
        }
        if (timeoutRef.current) {
            clearTimeout(timeoutRef.current);
            timeoutRef.current = null;
            console.log('‚úÖ Cleared timeout');
        }

        // Reset checking flag khi cleanup
        isCheckingRef.current = false;
        console.log('‚úÖ All intervals and timeouts cleared successfully');
    };

    const generateQRCode = async (data: string) => {
        try {
            // Dynamic import c·ªßa QRCode ƒë·ªÉ tr√°nh l·ªói SSR
            const QRCode = (await import('qrcode')).default;

            const url = await QRCode.toDataURL(data, {
                width: 300,
                margin: 2,
                color: {
                    dark: '#000000',
                    light: '#FFFFFF'
                }
            });
            setQrCodeUrl(url);
        } catch (error) {
            console.error('Error generating QR code:', error);
            onPaymentError("L·ªói khi t·∫°o m√£ QR");
        }
    };

    const startCountdown = () => {
        setCountdown(10);
        setCheckingStarted(false);

        countdownIntervalRef.current = setInterval(() => {
            setCountdown(prev => {
                if (prev <= 1) {
                    if (countdownIntervalRef.current) {
                        clearInterval(countdownIntervalRef.current);
                        countdownIntervalRef.current = null;
                    }
                    startPaymentStatusChecking();
                    return 0;
                }
                return prev - 1;
            });
        }, 1000);
    };

    const startPaymentStatusChecking = () => {
        setCheckingStarted(true);
        setPaymentStatus('checking');
        setStatusMessage("ƒêang ki·ªÉm tra tr·∫°ng th√°i thanh to√°n...");

        console.log('üöÄ Starting payment status polling for orderCode:', orderCode);

        // B·∫Øt ƒë·∫ßu polling m·ªói 5 gi√¢y
        pollIntervalRef.current = setInterval(() => {
            // Double check v·ªõi ref ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng g·ªçi khi ƒë√£ completed
            if (!isCompletedRef.current) {
                console.log('‚è∞ Interval triggered - checking payment status...');
                checkPaymentStatus();
            } else {
                console.log('‚ö†Ô∏è Interval triggered but payment already completed - skipping');
            }
        }, 5000);

        // G·ªçi l·∫ßn ƒë·∫ßu ngay l·∫≠p t·ª©c
        checkPaymentStatus();
    };

    const createMedicalRecord = async () => {
        // Prevent duplicate calls - QUAN TR·ªåNG!
        if (isCreatingRecordRef.current) {
            console.log('‚ö†Ô∏è Medical record creation already in progress - skipping duplicate call');
            return;
        }

        isCreatingRecordRef.current = true;
        console.log('üè• Starting medical record creation...');

        try {
            if (!medicalRecordData) {
                throw new Error("Kh√¥ng c√≥ d·ªØ li·ªáu phi·∫øu kh√°m");
            }

            setStatusMessage("ƒêang t·∫°o phi·∫øu kh√°m...");

            const medicalRecordRequest: SimpleMedicalRecordCreateData = {
                patientId: medicalRecordData.patientId,
                doctorId: medicalRecordData.doctorId || null,
                healthPlanId: medicalRecordData.healthPlanId || null,
                symptoms: medicalRecordData.symptoms,
                invoiceId: invoiceId
            };

            const response = await medicalRecordService.createSimpleMedicalRecord(medicalRecordRequest);

            console.log('Medical record API response:', response);

            // Ki·ªÉm tra response - API c√≥ th·ªÉ tr·∫£ v·ªÅ message "successfully" khi th√†nh c√¥ng
            if (response && (response.data || response.message?.toLowerCase().includes('success'))) {
                console.log('Medical record created successfully');

                // L∆∞u medical record ID v√†o localStorage
                const medicalRecordId = response.data;
                if (medicalRecordId) {
                    localStorage.setItem('currentMedicalRecordId', medicalRecordId.toString());
                    console.log('üíæ ƒê√£ l∆∞u medical record ID v√†o localStorage:', medicalRecordId);
                }

                setStatusMessage("Thanh to√°n v√† t·∫°o phi·∫øu kh√°m th√†nh c√¥ng!");
                // G·ªçi callback success ƒë·ªÉ update parent component
                onPaymentSuccess();
            } else {
                console.log('Medical record creation failed:', response);
                throw new Error(response?.message || "Kh√¥ng th·ªÉ t·∫°o phi·∫øu kh√°m");
            }
        } catch (error: any) {
            console.error('Error creating medical record:', error);

            // Ki·ªÉm tra xem c√≥ ph·∫£i l√† l·ªói th·ª±c s·ª± kh√¥ng
            const errorMessage = error.response?.data?.message || error.message || "L·ªói khi t·∫°o phi·∫øu kh√°m";

            // N·∫øu message c√≥ ch·ª©a "success" th√¨ c√≥ th·ªÉ ƒë√¢y kh√¥ng ph·∫£i l√† l·ªói th·ª±c s·ª±
            if (errorMessage.toLowerCase().includes('success')) {
                console.log('API returned success message in error block, treating as success');

                // Th·ª≠ l·∫•y medical record ID t·ª´ error response
                const medicalRecordId = error.response?.data?.data;
                if (medicalRecordId) {
                    localStorage.setItem('currentMedicalRecordId', medicalRecordId.toString());
                    console.log('üíæ ƒê√£ l∆∞u medical record ID v√†o localStorage:', medicalRecordId);
                }

                setStatusMessage("Thanh to√°n v√† t·∫°o phi·∫øu kh√°m th√†nh c√¥ng!");
                onPaymentSuccess();
            } else {
                setPaymentStatus('failed');
                setStatusMessage(`Thanh to√°n th√†nh c√¥ng nh∆∞ng l·ªói t·∫°o phi·∫øu kh√°m: ${errorMessage}`);
                onPaymentError(errorMessage);
            }
        }
    };

    const checkPaymentStatus = async () => {
        // Prevent duplicate calls v√† calls sau khi ƒë√£ completed
        if (isCheckingRef.current || isCompletedRef.current) {
            console.log('‚è≠Ô∏è Skipping payment check - already checking or completed');
            return;
        }

        isCheckingRef.current = true;
        console.log('üîç Checking payment status for orderCode:', orderCode);

        try {
            const response: PaymentStatusResponse = await paymentService.checkPaymentStatus(orderCode);

            // Check l·∫°i m·ªôt l·∫ßn n·ªØa SAU KHI c√≥ response - tr√°nh race condition
            if (isCompletedRef.current) {
                console.log('‚ö†Ô∏è Payment already completed during API call - aborting');
                return;
            }

            if (response.data === true) {
                // Thanh to√°n th√†nh c√¥ng - SET FLAG NGAY L·∫¨P T·ª®C TR∆Ø·ªöC KHI L√ÄM B·∫§T C·ª® ƒêI·ªÄU G√å
                console.log('‚úÖ Payment successful! Setting completed flag and stopping all polling.');
                isCompletedRef.current = true;

                setPaymentStatus('success');
                setStatusMessage("Thanh to√°n th√†nh c√¥ng! ƒêang t·∫°o phi·∫øu kh√°m...");

                // D·ª´ng polling NGAY L·∫¨P T·ª®C
                cleanup();

                // T·∫°o phi·∫øu kh√°m n·∫øu c√≥ d·ªØ li·ªáu
                if (medicalRecordData) {
                    await createMedicalRecord();
                } else {
                    // G·ªçi callback success ƒë·ªÉ update parent component
                    onPaymentSuccess();
                }
            } else {
                // V·∫´n ch∆∞a thanh to√°n, ti·∫øp t·ª•c ch·ªù
                console.log('‚è≥ Payment still pending, continuing to poll...');
                setStatusMessage("ƒêang ch·ªù thanh to√°n...");
            }
        } catch (error: any) {
            console.error('‚ùå Error checking payment status:', error);
            isCompletedRef.current = true; // Set completed flag
            setPaymentStatus('failed');
            setStatusMessage("L·ªói khi ki·ªÉm tra tr·∫°ng th√°i thanh to√°n");
            cleanup();

            // G·ªçi callback error
            setTimeout(() => {
                onPaymentError("L·ªói khi ki·ªÉm tra tr·∫°ng th√°i thanh to√°n");
            }, 2000);
        } finally {
            // CH·ªà reset isCheckingRef n·∫øu ch∆∞a completed
            // N·∫øu ƒë√£ completed, gi·ªØ nguy√™n ƒë·ªÉ tr√°nh race condition
            if (!isCompletedRef.current) {
                isCheckingRef.current = false;
            }
        }
    };

    const handleClose = () => {
        console.log('üîí User closing modal - cleaning up...');
        cleanup();

        // N·∫øu thanh to√°n th√†nh c√¥ng, g·ªçi callback ƒë·ªÉ reset form
        if (paymentStatus === 'success') {
            console.log('‚úÖ User manually closing successful payment modal');
        }

        // Reset t·∫•t c·∫£ states v√† flags
        setPaymentStatus('waiting');
        setStatusMessage("");
        setCountdown(10);
        setCheckingStarted(false);
        setQrCodeUrl("");
        isCheckingRef.current = false;
        isCompletedRef.current = false;
        isCreatingRecordRef.current = false; // Reset medical record creation flag
        onHide();
    };

    const getStatusVariant = () => {
        switch (paymentStatus) {
            case 'success':
                return 'success';
            case 'failed':
                return 'danger';
            case 'checking':
                return 'info';
            default:
                return 'primary';
        }
    };

    const getStatusIcon = () => {
        switch (paymentStatus) {
            case 'success':
                return <i className="bi bi-check-circle-fill me-2"></i>;
            case 'failed':
                return <i className="bi bi-x-circle-fill me-2"></i>;
            case 'checking':
                return <Spinner animation="border" size="sm" className="me-2" />;
            default:
                return <i className="bi bi-qr-code me-2"></i>;
        }
    };

    return (
        <Modal show={show} onHide={handleClose} centered size="lg">
            <Modal.Header closeButton>
                <Modal.Title className="d-flex align-items-center">
                    <i className="bi bi-qr-code me-2"></i>
                    Thanh to√°n b·∫±ng m√£ QR
                </Modal.Title>
            </Modal.Header>

            <Modal.Body className="text-center">
                {/* QR Code Display */}
                <div className="mb-4">
                    {qrCodeUrl ? (
                        <div>
                            <img
                                src={qrCodeUrl}
                                alt="QR Code for payment"
                                className="img-fluid mb-3"
                                style={{ maxWidth: '300px', border: '1px solid #dee2e6', borderRadius: '8px' }}
                            />
                            <p className="text-muted">
                                Qu√©t m√£ QR b·∫±ng ·ª©ng d·ª•ng ng√¢n h√†ng ƒë·ªÉ thanh to√°n
                            </p>
                        </div>
                    ) : (
                        <div className="d-flex justify-content-center align-items-center" style={{ height: '300px' }}>
                            <Spinner animation="border" />
                            <span className="ms-2">ƒêang t·∫°o m√£ QR...</span>
                        </div>
                    )}
                </div>

                {/* Countdown Display */}
                {!checkingStarted && countdown > 0 && (
                    <Alert variant="warning" className="mb-3">
                        <i className="bi bi-clock me-2"></i>
                        S·∫Ω b·∫Øt ƒë·∫ßu ki·ªÉm tra tr·∫°ng th√°i thanh to√°n sau {countdown} gi√¢y
                    </Alert>
                )}

                {/* Status Display */}
                {(checkingStarted || paymentStatus === 'success' || paymentStatus === 'failed') && statusMessage && (
                    <Alert variant={getStatusVariant()} className="mb-3">
                        <div className="d-flex align-items-center justify-content-center">
                            {getStatusIcon()}
                            {statusMessage}
                        </div>
                    </Alert>
                )}

                {/* Instructions */}
                {paymentStatus === 'waiting' && (
                    <div className="mt-4">
                        <h6 className="text-primary mb-3">H∆∞·ªõng d·∫´n thanh to√°n:</h6>
                        <div className="text-start">
                            <ol className="ps-3">
                                <li className="mb-2">M·ªü ·ª©ng d·ª•ng ng√¢n h√†ng tr√™n ƒëi·ªán tho·∫°i</li>
                                <li className="mb-2">Ch·ªçn ch·ª©c nƒÉng "Qu√©t m√£ QR" ho·∫∑c "Chuy·ªÉn kho·∫£n QR"</li>
                                <li className="mb-2">Qu√©t m√£ QR hi·ªÉn th·ªã tr√™n m√†n h√¨nh</li>
                                <li className="mb-2">X√°c nh·∫≠n th√¥ng tin v√† th·ª±c hi·ªán thanh to√°n</li>
                                <li>Ch·ªù h·ªá th·ªëng x√°c nh·∫≠n thanh to√°n th√†nh c√¥ng</li>
                            </ol>
                        </div>
                    </div>
                )}
            </Modal.Body>

            <Modal.Footer>
                <Button variant="outline-secondary" onClick={handleClose}>
                    {paymentStatus === 'success' ? 'ƒê√≥ng' : 'H·ªßy'}
                </Button>
                {paymentStatus === 'success' && (
                    <Button variant="success" onClick={handleClose}>
                        <i className="bi bi-check-lg me-2"></i>
                        Ho√†n t·∫•t thanh to√°n
                    </Button>
                )}
            </Modal.Footer>
        </Modal>
    );
};

export default QRPaymentModal;