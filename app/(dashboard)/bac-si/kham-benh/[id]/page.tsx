"use client";
import { Card, Col, Row, Form, Button, Alert, Tab, Tabs, Table, Badge, Modal } from "react-bootstrap";
import { useState, useEffect, useCallback } from "react";
import { useParams, useRouter } from "next/navigation";
import { PersonFill, ClipboardData, Save, Plus, Check, X, Activity, FileText, Receipt, InfoCircle, Gear, Capsule } from "react-bootstrap-icons";
import { IconHistory } from "@tabler/icons-react";
import { useAuth } from "../../../../../contexts/AuthContext";
import { useMessage } from "../../../../../components/common/MessageProvider";
import { Appointment } from "../../../../../services/appointmentService";
import Loading from "../../../../../components/common/Loading";
import { AppointmentService, ServiceStatus } from "../../../../../types/MedicalServiceType";
import { medicalRecordService, type MedicalRecordDetail, type MedicalRecordUpdateFields, type MedicalRecordStatusUpdate, MedicalRecordStatus } from "../../../../../services";
import labOrderService, { LabOrderDetail, CreateLabOrderRequest, UpdateLabOrderRequest } from "../../../../../services/labOrderService";
import medicalServiceService, { ServiceDetailResponse, AssignedDoctor, ServiceSearchResult } from "../../../../../services/medicalServiceService";
import ServiceSearchInput from "../../../../../components/common/ServiceSearchInput";
import MedicalRecordHistory from "../../../../../components/medical-record/MedicalRecordHistory";
import PrescriptionManagement from "../../../../../components/prescription/PrescriptionManagement";

// CSS cho print
const printStyles = `
@media print {
    .no-print { display: none !important; }
    .print-only { display: block !important; }
    body { font-size: 12pt; }
    .container-fluid { max-width: none; margin: 0; padding: 10px; }
    .card { border: 1px solid #000; box-shadow: none; }
    .table { border-collapse: collapse; }
    .table th, .table td { border: 1px solid #000; padding: 5px; }
}
`;

interface ExaminationData {
    chanDoan: string;
    trieuChung: string;
    huongDieuTri: string;
    ghiChu: string;
}

interface ApiErrorLike {
    response?: {
        data?: {
            message?: string;
        };
    };
    message?: string;
}

const getErrorMessage = (error: unknown, fallback: string): string => {
    if (typeof error === 'string') {
        return error;
    }

    if (typeof error === 'object' && error !== null) {
        const apiError = error as ApiErrorLike;
        if (apiError.response?.data?.message) {
            return apiError.response.data.message;
        }

        if (apiError.message) {
            return apiError.message;
        }
    }

    return fallback;
};

const ExaminationDetailPage = () => {
    const { user } = useAuth();
    const router = useRouter();
    const params = useParams();
    const appointmentId = params.id as string;
    const message = useMessage();

    const [appointment, setAppointment] = useState<Appointment | null>(null);
    const [medicalRecord, setMedicalRecord] = useState<MedicalRecordDetail | null>(null);
    const [loading, setLoading] = useState(true);
    const [saving, setSaving] = useState(false);
    const [alert, setAlert] = useState<{ type: 'success' | 'danger'; message: string } | null>(null);
    const [activeTab, setActiveTab] = useState('patient-info');

    // States cho d·ªãch v·ª• v√† ch·ªâ ƒë·ªãnh
    const [paidServices, setPaidServices] = useState<AppointmentService[]>([]);
    const [availableDoctors, setAvailableDoctors] = useState<Array<{ id: number, name: string, specialty: string }>>([]);
    const [showAddPrescriptionModal, setShowAddPrescriptionModal] = useState(false);
    const [selectedService, setSelectedService] = useState<ServiceSearchResult | null>(null);
    const [selectedDoctorId, setSelectedDoctorId] = useState<number | null>(null);
    const [prescriptionReason, setPrescriptionReason] = useState('');
    const [prescriptionNotes, setPrescriptionNotes] = useState('');
    const [loadingServiceDetail, setLoadingServiceDetail] = useState(false);

    // States cho edit ch·ªâ ƒë·ªãnh
    const [showEditPrescriptionModal, setShowEditPrescriptionModal] = useState(false);
    const [selectedDoctor, setSelectedDoctor] = useState<string>('');
    const [labOrderDetail, setLabOrderDetail] = useState<LabOrderDetail | null>(null);
    const [loadingLabOrderDetail, setLoadingLabOrderDetail] = useState(false);
    const [serviceDetail, setServiceDetail] = useState<ServiceDetailResponse | null>(null);
    const [availableDoctorsForAssignment, setAvailableDoctorsForAssignment] = useState<AssignedDoctor[]>([]);

    // States cho edit d·ªãch v·ª• hi·ªán c√≥ 
    const [editingService, setEditingService] = useState<AppointmentService | null>(null);
    const [showEditServiceModal, setShowEditServiceModal] = useState(false);
    const [serviceReason, setServiceReason] = useState('');
    const [serviceNotes, setServiceNotes] = useState('');
    const [serviceDoctor, setServiceDoctor] = useState('');

    // States cho modal xem k·∫øt qu·∫£ x√©t nghi·ªám
    const [showResultModal, setShowResultModal] = useState(false);
    const [selectedLabResult, setSelectedLabResult] = useState<LabOrderDetail | null>(null);
    const [loadingLabResult, setLoadingLabResult] = useState(false);

    // States cho modal l·ªãch s·ª≠ kh√°m b·ªánh
    const [showHistoryModal, setShowHistoryModal] = useState(false);

    const [examinationData, setExaminationData] = useState<ExaminationData>({
        chanDoan: '',
        trieuChung: '',
        huongDieuTri: '',
        ghiChu: ''
    });

    // H√†m ri√™ng ƒë·ªÉ ch·ªâ refresh danh s√°ch d·ªãch v·ª• m√† kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn examination data
    const refreshServicesList = async () => {
        try {
            // G·ªçi API l·∫•y chi ti·∫øt phi·∫øu kh√°m
            const response = await medicalRecordService.getMedicalRecordDetail(appointmentId);

            if (response && response.data) {
                const record = response.data;
                console.log('üîÑ Refresh danh s√°ch d·ªãch v·ª• t·ª´ API:', record);

                // CH·ªà c·∫≠p nh·∫≠t danh s√°ch d·ªãch v·ª•, KH√îNG ƒë·ªông ƒë·∫øn examination data
                const services: AppointmentService[] = [];

                if (record.invoiceDetailsResponse) {
                    record.invoiceDetailsResponse.forEach((invoice) => {
                        const paymentStatus = invoice.status === 'DA_THANH_TOAN'
                            ? ServiceStatus.DA_THANH_TOAN
                            : ServiceStatus.CHO_THANH_TOAN;

                        // X·ª≠ l√Ω MULTIPLE services (g√≥i d·ªãch v·ª•)
                        if (invoice.typeService === 'MULTIPLE' && invoice.multipleLab) {
                            invoice.multipleLab.forEach((lab) => {
                                services.push({
                                    id: lab.id,
                                    serviceId: invoice.healthPlanId,
                                    serviceName: lab.name || invoice.healthPlanName,
                                    price: invoice.healthPlanPrice / invoice.multipleLab!.length,
                                    status: paymentStatus,
                                    paymentDate: invoice.status === 'DA_THANH_TOAN' ? record.date : undefined,
                                    orderDate: lab.createdAt || undefined,
                                    room: lab.room || '',
                                    assignedDoctor: lab.doctorPerforming || 'Ch∆∞a ph√¢n c√¥ng',
                                    reason: '',
                                    executionStatus: lab.status,
                                    serviceParent: invoice.healthPlanName
                                });
                            });
                        }

                        // X·ª≠ l√Ω SINGLE service (d·ªãch v·ª• ƒë∆°n l·∫ª)
                        else if (invoice.typeService === 'SINGLE' && invoice.singleLab) {
                            const lab = invoice.singleLab;
                            services.push({
                                id: lab.id,
                                serviceId: invoice.healthPlanId,
                                serviceName: lab.name || invoice.healthPlanName,
                                price: invoice.healthPlanPrice,
                                status: paymentStatus,
                                paymentDate: invoice.status === 'DA_THANH_TOAN' ? record.date : undefined,
                                orderDate: lab.createdAt || undefined,
                                room: lab.room || '',
                                assignedDoctor: lab.doctorPerforming || 'Ch∆∞a ph√¢n c√¥ng',
                                reason: '',
                                executionStatus: lab.status
                            });
                        }
                    });
                }

                // Fallback: backward compatibility
                else if (record.labOrdersResponses) {
                    record.labOrdersResponses.forEach((labOrder) => {
                        const paymentStatus = labOrder.statusPayment === 'DA_THANH_TOAN'
                            ? ServiceStatus.DA_THANH_TOAN
                            : ServiceStatus.CHO_THANH_TOAN;

                        services.push({
                            id: labOrder.id,
                            serviceId: labOrder.healthPlanId,
                            serviceName: labOrder.healthPlanName,
                            price: labOrder.price,
                            status: paymentStatus,
                            paymentDate: labOrder.statusPayment === 'DA_THANH_TOAN' ? record.date : undefined,
                            orderDate: labOrder.orderDate || undefined,
                            room: labOrder.room || '',
                            assignedDoctor: labOrder.doctorPerformed || 'Ch∆∞a ph√¢n c√¥ng',
                            reason: labOrder.diagnosis || '',
                            executionStatus: labOrder.status
                        });
                    });
                }

                setPaidServices(services);

            } else {
                throw new Error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch d·ªãch v·ª•');
            }

        } catch (error: unknown) {
            console.error('‚ùå L·ªói khi refresh danh s√°ch d·ªãch v·ª•:', error);
            const messageText = getErrorMessage(error, 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch d·ªãch v·ª•');
            setAlert({ type: 'danger', message: messageText });
        }
    };

    const fetchMedicalRecordDetails = useCallback(async () => {
        try {
            setLoading(true);

            // G·ªçi API l·∫•y chi ti·∫øt phi·∫øu kh√°m
            const response = await medicalRecordService.getMedicalRecordDetail(appointmentId);

            if (response && response.data) {
                const record = response.data;
                console.log('üìã Chi ti·∫øt phi·∫øu kh√°m t·ª´ API:', record);

                setMedicalRecord(record);

                // T·∫°o appointment object t·ª´ d·ªØ li·ªáu phi·∫øu kh√°m
                const appointmentFromRecord: Appointment = {
                    id: parseInt(record.id),
                    fullName: record.patientName,
                    phone: '', // Kh√¥ng c√≥ trong API response
                    date: record.date.split('T')[0],
                    time: record.date.split('T')[1]?.substring(0, 5) || '',
                    symptoms: record.symptoms,
                    status: 'DA_XAC_NHAN',
                    birth: '',
                    gender: '',
                    address: ''
                };

                setAppointment(appointmentFromRecord);

                // Thi·∫øt l·∫≠p d·ªØ li·ªáu kh√°m t·ª´ API
                setExaminationData({
                    chanDoan: record.diagnosis || '',
                    trieuChung: record.symptoms || '',
                    huongDieuTri: record.treatmentPlan || '',
                    ghiChu: record.note || ''
                });

                // Chuy·ªÉn ƒë·ªïi invoiceDetailsResponse th√†nh AppointmentService format
                // Hi·ªÉn th·ªã T·∫§T C·∫¢ ch·ªâ ƒë·ªãnh (c·∫£ ƒë√£ thanh to√°n v√† ch∆∞a thanh to√°n)
                const services: AppointmentService[] = [];

                if (record.invoiceDetailsResponse) {
                    record.invoiceDetailsResponse.forEach((invoice) => {
                        const paymentStatus = invoice.status === 'DA_THANH_TOAN'
                            ? ServiceStatus.DA_THANH_TOAN
                            : ServiceStatus.CHO_THANH_TOAN;

                        // X·ª≠ l√Ω MULTIPLE services (g√≥i d·ªãch v·ª•)
                        if (invoice.typeService === 'MULTIPLE' && invoice.multipleLab) {
                            invoice.multipleLab.forEach((lab) => {
                                services.push({
                                    id: lab.id,
                                    serviceId: invoice.healthPlanId,
                                    serviceName: lab.name || invoice.healthPlanName,
                                    price: invoice.healthPlanPrice / invoice.multipleLab!.length, // Chia ƒë·ªÅu gi√° cho c√°c d·ªãch v·ª• con
                                    status: paymentStatus,
                                    paymentDate: invoice.status === 'DA_THANH_TOAN' ? record.date : undefined,
                                    orderDate: lab.createdAt || undefined,
                                    room: lab.room || '', // ‚úÖ L·∫•y th√¥ng tin ph√≤ng t·ª´ lab
                                    assignedDoctor: lab.doctorPerforming || 'Ch∆∞a ph√¢n c√¥ng',
                                    reason: '', // Kh√¥ng c√≥ diagnosis ri√™ng cho t·ª´ng lab
                                    executionStatus: lab.status,
                                    serviceParent: invoice.healthPlanName // T√™n g√≥i d·ªãch v·ª•
                                });
                            });
                        }

                        // X·ª≠ l√Ω SINGLE service (d·ªãch v·ª• ƒë∆°n l·∫ª)
                        else if (invoice.typeService === 'SINGLE' && invoice.singleLab) {
                            const lab = invoice.singleLab;
                            services.push({
                                id: lab.id,
                                serviceId: invoice.healthPlanId,
                                serviceName: lab.name || invoice.healthPlanName,
                                price: invoice.healthPlanPrice,
                                status: paymentStatus,
                                paymentDate: invoice.status === 'DA_THANH_TOAN' ? record.date : undefined,
                                orderDate: lab.createdAt || undefined,
                                room: lab.room || '', // ‚úÖ L·∫•y th√¥ng tin ph√≤ng t·ª´ lab
                                assignedDoctor: lab.doctorPerforming || 'Ch∆∞a ph√¢n c√¥ng',
                                reason: '',
                                executionStatus: lab.status
                            });
                        }
                    });
                }

                // Fallback: N·∫øu v·∫´n c√≤n d√πng labOrdersResponses (backward compatibility)
                else if (record.labOrdersResponses) {
                    record.labOrdersResponses.forEach((labOrder) => {
                        const paymentStatus = labOrder.statusPayment === 'DA_THANH_TOAN'
                            ? ServiceStatus.DA_THANH_TOAN
                            : ServiceStatus.CHO_THANH_TOAN;

                        services.push({
                            id: labOrder.id,
                            serviceId: labOrder.healthPlanId,
                            serviceName: labOrder.healthPlanName,
                            price: labOrder.price,
                            status: paymentStatus,
                            paymentDate: labOrder.statusPayment === 'DA_THANH_TOAN' ? record.date : undefined,
                            orderDate: labOrder.orderDate || undefined,
                            room: labOrder.room || '',
                            assignedDoctor: labOrder.doctorPerformed || 'Ch∆∞a ph√¢n c√¥ng',
                            reason: labOrder.diagnosis || '',
                            executionStatus: labOrder.status
                        });
                    });
                }

                setPaidServices(services);

            } else {
                throw new Error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin phi·∫øu kh√°m');
            }

        } catch (error: unknown) {
            console.error('L·ªói khi t·∫£i chi ti·∫øt phi·∫øu kh√°m:', error);
            const messageText = getErrorMessage(error, 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin phi·∫øu kh√°m');
            setAlert({ type: 'danger', message: messageText });
        } finally {
            setLoading(false);
        }
    }, [appointmentId]);

    const handleEditPrescription = async (labOrderId: number | null) => {
        // Kh√¥ng th·ªÉ xem chi ti·∫øt n·∫øu kh√¥ng c√≥ ID (nh∆∞ ti·ªÅn kh√°m)
        if (labOrderId === null) {
            setAlert({ type: 'danger', message: 'D·ªãch v·ª• n√†y kh√¥ng c√≥ chi ti·∫øt ch·ªâ ƒë·ªãnh (ti·ªÅn kh√°m)' });
            return;
        }

        try {
            setLoadingLabOrderDetail(true);

            console.log('üîç ƒêang l·∫•y chi ti·∫øt ch·ªâ ƒë·ªãnh v·ªõi ID:', labOrderId);

            // 1. G·ªçi API l·∫•y chi ti·∫øt ch·ªâ ƒë·ªãnh
            const labOrderResponse = await labOrderService.getLabOrderDetail(labOrderId);

            if (labOrderResponse && labOrderResponse.data) {
                const labOrderDetail = labOrderResponse.data;
                console.log('üìÑ Chi ti·∫øt ch·ªâ ƒë·ªãnh t·ª´ API:', labOrderDetail);

                setLabOrderDetail(labOrderDetail);

                // 2. G·ªçi API l·∫•y chi ti·∫øt d·ªãch v·ª• ƒë·ªÉ l·∫•y danh s√°ch b√°c sƒ© ƒë∆∞·ª£c ph√¢n c√¥ng
                console.log('ü©∫ ƒêang l·∫•y chi ti·∫øt d·ªãch v·ª• v·ªõi healthPlanId:', labOrderDetail.healthPlanId);

                try {
                    const serviceDetailResponse = await medicalServiceService.getServiceDetail(labOrderDetail.healthPlanId);
                    console.log('ü©∫ Chi ti·∫øt d·ªãch v·ª• t·ª´ API:', serviceDetailResponse);

                    setServiceDetail(serviceDetailResponse);
                    setAvailableDoctorsForAssignment(serviceDetailResponse.doctorsAssigned || []);
                } catch (serviceError: unknown) {
                    console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt d·ªãch v·ª•:', serviceError);
                    setServiceDetail(null);
                    setAvailableDoctorsForAssignment([]);
                }

                // Hi·ªÉn th·ªã modal chi ti·∫øt ch·ªâ ƒë·ªãnh
                setSelectedDoctor(labOrderDetail.doctorOrdered || labOrderDetail.doctorPerformed || user?.doctor?.fullName || '');
                setShowEditPrescriptionModal(true);

            } else {
                throw new Error('Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt ch·ªâ ƒë·ªãnh');
            }

        } catch (error: unknown) {
            console.error('L·ªói khi l·∫•y chi ti·∫øt ch·ªâ ƒë·ªãnh:', error);
            const messageText = getErrorMessage(error, 'Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt ch·ªâ ƒë·ªãnh');
            setAlert({
                type: 'danger',
                message: messageText
            });
        } finally {
            setLoadingLabOrderDetail(false);
        }
    };

    const fetchAvailableDoctors = useCallback(async () => {
        try {
            // T·∫°m th·ªùi d√πng d·ªØ li·ªáu m·∫´u
            const sampleDoctors = [
                { id: 1, name: 'BS. Nguy·ªÖn VƒÉn A', specialty: 'N·ªôi khoa' },
                { id: 2, name: 'BS. Tr·∫ßn Th·ªã B', specialty: 'Ngo·∫°i khoa' },
                { id: 3, name: 'BS. L√™ VƒÉn C', specialty: 'Tim m·∫°ch' },
                { id: 4, name: 'BS. Ph·∫°m Th·ªã D', specialty: 'Da li·ªÖu' }
            ];
            setAvailableDoctors(sampleDoctors);
        } catch (error) {
            console.error('L·ªói khi t·∫£i danh s√°ch b√°c sƒ©:', error);
        }
    }, []);

    useEffect(() => {
        if (appointmentId) {
            fetchMedicalRecordDetails();
            fetchAvailableDoctors();
        }
    }, [appointmentId, fetchAvailableDoctors, fetchMedicalRecordDetails]);

    const handleAddPrescription = async () => {
        if (!selectedService || !prescriptionReason.trim() || !selectedDoctorId) {
            setAlert({ type: 'danger', message: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin (d·ªãch v·ª•, b√°c sƒ© th·ª±c hi·ªán, l√Ω do ch·ªâ ƒë·ªãnh)' });
            return;
        }

        if (!medicalRecord?.id) {
            setAlert({ type: 'danger', message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin phi·∫øu kh√°m' });
            return;
        }

        try {
            setSaving(true);

            // T·∫°o request theo API spec
            const createRequest: CreateLabOrderRequest = {
                recordId: parseInt(medicalRecord.id),
                healthPlanId: selectedService.id,
                performingDoctorId: selectedDoctorId,
                diagnosis: prescriptionReason
            };

            console.log('üîÑ ƒêang t·∫°o ch·ªâ ƒë·ªãnh m·ªõi:', createRequest);

            // G·ªçi API t·∫°o ch·ªâ ƒë·ªãnh
            const response = await labOrderService.createLabOrder(createRequest);

            console.log('‚úÖ T·∫°o ch·ªâ ƒë·ªãnh th√†nh c√¥ng:', response);

            // ƒê√≥ng modal v√† clear form TR∆Ø·ªöC KHI refresh
            setShowAddPrescriptionModal(false);
            setSelectedService(null);
            setSelectedDoctorId(null);
            setPrescriptionReason('');
            setPrescriptionNotes('');
            setServiceDetail(null);

            // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            setAlert({ type: 'success', message: 'ƒê√£ th√™m ch·ªâ ƒë·ªãnh m·ªõi th√†nh c√¥ng' });

            // ‚úÖ CH·ªà refresh danh s√°ch d·ªãch v·ª•, KH√îNG load l·∫°i to√†n b·ªô phi·∫øu kh√°m
            await refreshServicesList();

        } catch (error: unknown) {
            console.error('‚ùå L·ªói khi th√™m ch·ªâ ƒë·ªãnh:', error);
            const messageText = getErrorMessage(error, 'C√≥ l·ªói x·∫£y ra khi th√™m ch·ªâ ƒë·ªãnh');
            setAlert({ type: 'danger', message: messageText });
        } finally {
            setSaving(false);
        }
    };

    // X·ª≠ l√Ω khi ch·ªçn d·ªãch v·ª• t·ª´ ServiceSearchInput
    const handleServiceSelect = async (service: ServiceSearchResult) => {
        setSelectedService(service);
        setLoadingServiceDetail(true);

        try {
            // L·∫•y chi ti·∫øt d·ªãch v·ª• ƒë·ªÉ hi·ªÉn th·ªã b√°c sƒ© c√≥ th·ªÉ ph√¢n c√¥ng
            const detail = await medicalServiceService.getServiceDetail(service.id);
            setServiceDetail(detail);

            // Auto-select b√°c sƒ© ƒë·∫ßu ti√™n n·∫øu c√≥
            if (detail.doctorsAssigned && detail.doctorsAssigned.length > 0) {
                setSelectedDoctorId(detail.doctorsAssigned[0].id);
            }
        } catch (error) {
            console.error('L·ªói khi t·∫£i chi ti·∫øt d·ªãch v·ª•:', error);
        } finally {
            setLoadingServiceDetail(false);
        }
    };

    // X·ª≠ l√Ω xem k·∫øt qu·∫£ d·ªãch v·ª•
    const handleViewResult = async (serviceId: number | null) => {
        if (serviceId === null) {
            setAlert({ type: 'danger', message: 'Kh√¥ng th·ªÉ xem k·∫øt qu·∫£ cho d·ªãch v·ª• n√†y' });
            return;
        }

        try {
            setLoadingLabResult(true);
            setShowResultModal(true);

            console.log('üîç ƒêang l·∫•y k·∫øt qu·∫£ x√©t nghi·ªám cho labOrderId:', serviceId);

            // G·ªçi API l·∫•y chi ti·∫øt k·∫øt qu·∫£ x√©t nghi·ªám
            const response = await labOrderService.getLabOrderDetail(serviceId);

            if (response && response.data) {
                setSelectedLabResult(response.data);
                console.log('‚úÖ ƒê√£ l·∫•y k·∫øt qu·∫£ x√©t nghi·ªám:', response.data);
            } else {
                setAlert({ type: 'danger', message: 'Kh√¥ng c√≥ d·ªØ li·ªáu k·∫øt qu·∫£ x√©t nghi·ªám' });
                setShowResultModal(false);
            }

        } catch (error: unknown) {
            console.error('‚ùå L·ªói khi l·∫•y k·∫øt qu·∫£ x√©t nghi·ªám:', error);
            const messageText = getErrorMessage(error, 'C√≥ l·ªói x·∫£y ra khi l·∫•y k·∫øt qu·∫£ x√©t nghi·ªám');
            setAlert({
                type: 'danger',
                message: messageText
            });
            setShowResultModal(false);
        } finally {
            setLoadingLabResult(false);
        }
    };

    // X·ª≠ l√Ω c·∫≠p nh·∫≠t b√°c sƒ© ch·ªâ ƒë·ªãnh
    const handleUpdateLabOrder = async () => {
        if (!labOrderDetail?.id || !selectedDoctor) {
            setAlert({ type: 'danger', message: 'Vui l√≤ng ch·ªçn b√°c sƒ© ch·ªâ ƒë·ªãnh' });
            return;
        }

        // T√¨m ID b√°c sƒ© t·ª´ t√™n ƒë∆∞·ª£c ch·ªçn
        let performingDoctorId: number | null = null;

        // Ki·ªÉm tra trong danh s√°ch b√°c sƒ© ƒë∆∞·ª£c ph√¢n c√¥ng
        const assignedDoctor = availableDoctorsForAssignment.find(doctor => doctor.fullName === selectedDoctor);
        if (assignedDoctor) {
            performingDoctorId = assignedDoctor.id;
        } else if (labOrderDetail.doctorPerformedId && labOrderDetail.doctorPerformed === selectedDoctor) {
            // S·ª≠ d·ª•ng ID b√°c sƒ© ƒëang th·ª±c hi·ªán hi·ªán t·∫°i
            performingDoctorId = labOrderDetail.doctorPerformedId;
        }

        if (!performingDoctorId) {
            setAlert({ type: 'danger', message: 'Kh√¥ng t√¨m th·∫•y ID b√°c sƒ© ƒë∆∞·ª£c ch·ªçn' });
            return;
        }

        try {
            setSaving(true);

            const updateRequest: UpdateLabOrderRequest = {
                id: labOrderDetail.id,
                performingDoctorId: performingDoctorId
            };

            console.log('üîÑ ƒêang c·∫≠p nh·∫≠t ch·ªâ ƒë·ªãnh:', updateRequest);

            // G·ªçi API c·∫≠p nh·∫≠t
            await labOrderService.updateLabOrder(updateRequest);

            console.log('‚úÖ C·∫≠p nh·∫≠t ch·ªâ ƒë·ªãnh th√†nh c√¥ng');

            // ƒê√≥ng modal v√† hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            setShowEditPrescriptionModal(false);
            setAlert({ type: 'success', message: `ƒê√£ c·∫≠p nh·∫≠t b√°c sƒ© ch·ªâ ƒë·ªãnh: ${selectedDoctor}` });

            // ‚úÖ CH·ªà refresh danh s√°ch d·ªãch v·ª•, KH√îNG load l·∫°i to√†n b·ªô phi·∫øu kh√°m
            await refreshServicesList();

        } catch (error: unknown) {
            console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t ch·ªâ ƒë·ªãnh:', error);
            const messageText = getErrorMessage(error, 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t b√°c sƒ© ch·ªâ ƒë·ªãnh');
            setAlert({
                type: 'danger',
                message: messageText
            });
        } finally {
            setSaving(false);
        }
    };

    const handleUpdateService = async () => {
        if (!editingService || !serviceReason.trim()) {
            setAlert({ type: 'danger', message: 'Vui l√≤ng nh·∫≠p l√Ω do ch·ªâ ƒë·ªãnh' });
            return;
        }

        try {
            const updatedService: AppointmentService = {
                ...editingService,
                reason: serviceReason,
                notes: serviceNotes,
                assignedDoctor: serviceDoctor
            };

            setPaidServices(paidServices.map(s =>
                s.id === editingService.id ? updatedService : s
            ));

            setShowEditServiceModal(false);
            setEditingService(null);
            setServiceReason('');
            setServiceNotes('');
            setServiceDoctor('');
            setAlert({ type: 'success', message: 'ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin d·ªãch v·ª• th√†nh c√¥ng' });

        } catch (error: unknown) {
            console.error('L·ªói khi c·∫≠p nh·∫≠t d·ªãch v·ª•:', error);
            const messageText = getErrorMessage(error, 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t d·ªãch v·ª•');
            setAlert({ type: 'danger', message: messageText });
        }
    };

    const handleInputChange = (field: keyof ExaminationData, value: string) => {
        setExaminationData(prev => ({
            ...prev,
            [field]: value
        }));
    };

    const handleSaveExamination = async () => {
        try {
            setSaving(true);

            // Validate required fields
            if (!examinationData.chanDoan.trim()) {
                setAlert({ type: 'danger', message: 'Vui l√≤ng nh·∫≠p ch·∫©n ƒëo√°n' });
                return;
            }

            if (!medicalRecord?.id) {
                setAlert({ type: 'danger', message: 'Kh√¥ng t√¨m th·∫•y ID phi·∫øu kh√°m' });
                return;
            }

            // Chu·∫©n b·ªã d·ªØ li·ªáu c·∫≠p nh·∫≠t theo API docs
            const updateData: MedicalRecordUpdateFields = {
                id: parseInt(medicalRecord.id),
                symptoms: examinationData.trieuChung,
                clinicalExamination: "", // C√≥ th·ªÉ th√™m field n√†y n·∫øu c·∫ßn
                diagnosis: examinationData.chanDoan,
                treatmentPlan: examinationData.huongDieuTri,
                note: examinationData.ghiChu
            };

            console.log('ƒêang c·∫≠p nh·∫≠t phi·∫øu kh√°m v·ªõi d·ªØ li·ªáu:', updateData);

            // G·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t phi·∫øu kh√°m
            const response = await medicalRecordService.updateMedicalRecordFields(updateData);

            if (response && response.message) {
                // Sau khi l∆∞u t·∫°m th√†nh c√¥ng, c·∫≠p nh·∫≠t tr·∫°ng th√°i sang CHO_XET_NGHIEM
                try {
                    const statusUpdate: MedicalRecordStatusUpdate = {
                        id: parseInt(medicalRecord.id),
                        status: MedicalRecordStatus.CHO_XET_NGHIEM
                    };

                    console.log('ƒêang c·∫≠p nh·∫≠t tr·∫°ng th√°i phi·∫øu kh√°m:', statusUpdate);

                    const statusResponse = await medicalRecordService.updateMedicalRecordStatus(statusUpdate);

                    if (statusResponse && statusResponse.message) {
                        setAlert({ type: 'success', message: 'ƒê√£ l∆∞u t·∫°m k·∫øt qu·∫£ kh√°m th√†nh c√¥ng. Phi·∫øu kh√°m ƒë√£ chuy·ªÉn sang tr·∫°ng th√°i ch·ªù x√©t nghi·ªám.' });
                        console.log('‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i phi·∫øu kh√°m th√†nh c√¥ng:', statusResponse);

                        // C·∫≠p nh·∫≠t tr·∫°ng th√°i local ƒë·ªÉ UI hi·ªÉn th·ªã ƒë√∫ng
                        if (medicalRecord) {
                            setMedicalRecord({ ...medicalRecord, status: MedicalRecordStatus.CHO_XET_NGHIEM });
                        }
                    } else {
                        throw new Error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i phi·∫øu kh√°m');
                    }
                } catch (statusError: unknown) {
                    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:', statusError);
                    setAlert({ type: 'danger', message: 'ƒê√£ l∆∞u t·∫°m th√†nh c√¥ng nh∆∞ng kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i. Vui l√≤ng th·ª≠ l·∫°i.' });
                }

                console.log('‚úÖ C·∫≠p nh·∫≠t phi·∫øu kh√°m th√†nh c√¥ng:', response);
            } else {
                throw new Error('Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ server');
            }

        } catch (error: unknown) {
            console.error('‚ùå L·ªói khi l∆∞u k·∫øt qu·∫£ kh√°m:', error);

            const errorMessage = getErrorMessage(error, 'C√≥ l·ªói x·∫£y ra khi l∆∞u k·∫øt qu·∫£ kh√°m');
            setAlert({ type: 'danger', message: errorMessage });
        } finally {
            setSaving(false);
        }
    };

    const handleCompleteExamination = async () => {
        try {
            setSaving(true);

            // Validate required fields
            if (!examinationData.chanDoan.trim()) {
                setAlert({ type: 'danger', message: 'Vui l√≤ng nh·∫≠p ch·∫©n ƒëo√°n tr∆∞·ªõc khi ho√†n th√†nh kh√°m' });
                return;
            }

            if (!medicalRecord?.id) {
                setAlert({ type: 'danger', message: 'Kh√¥ng t√¨m th·∫•y ID phi·∫øu kh√°m' });
                return;
            }

            // B∆∞·ªõc 1: L∆∞u th√¥ng tin kh√°m b·ªánh
            const updateData: MedicalRecordUpdateFields = {
                id: parseInt(medicalRecord.id),
                symptoms: examinationData.trieuChung,
                clinicalExamination: "", // C√≥ th·ªÉ th√™m field n√†y n·∫øu c·∫ßn
                diagnosis: examinationData.chanDoan,
                treatmentPlan: examinationData.huongDieuTri,
                note: examinationData.ghiChu
            };

            console.log('ƒêang ho√†n th√†nh kh√°m v·ªõi d·ªØ li·ªáu:', updateData);

            // G·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t phi·∫øu kh√°m
            const response = await medicalRecordService.updateMedicalRecordFields(updateData);

            if (response && response.message) {
                // B∆∞·ªõc 2: C·∫≠p nh·∫≠t tr·∫°ng th√°i sang HOAN_THANH
                const statusUpdate: MedicalRecordStatusUpdate = {
                    id: parseInt(medicalRecord.id),
                    status: MedicalRecordStatus.HOAN_THANH
                };

                console.log('ƒêang c·∫≠p nh·∫≠t tr·∫°ng th√°i ho√†n th√†nh:', statusUpdate);

                const statusResponse = await medicalRecordService.updateMedicalRecordStatus(statusUpdate);

                if (statusResponse && statusResponse.message) {
                    setAlert({ type: 'success', message: 'ƒê√£ ho√†n th√†nh kh√°m b·ªánh th√†nh c√¥ng!' });
                    console.log('‚úÖ Ho√†n th√†nh kh√°m b·ªánh th√†nh c√¥ng:', statusResponse);

                    // C·∫≠p nh·∫≠t tr·∫°ng th√°i local ƒë·ªÉ UI hi·ªÉn th·ªã ƒë√∫ng
                    if (medicalRecord) {
                        setMedicalRecord({ ...medicalRecord, status: MedicalRecordStatus.HOAN_THANH });
                    }

                    // Redirect v·ªÅ danh s√°ch sau 2 gi√¢y ƒë·ªÉ user c√≥ th·ªÉ th·∫•y th√¥ng b√°o
                    setTimeout(() => {
                        router.push('/bac-si/kham-benh');
                    }, 2000);
                } else {
                    throw new Error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i ho√†n th√†nh');
                }

                console.log('‚úÖ C·∫≠p nh·∫≠t th√¥ng tin kh√°m th√†nh c√¥ng:', response);
            } else {
                throw new Error('Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ server');
            }

        } catch (error: unknown) {
            console.error('‚ùå L·ªói khi ho√†n th√†nh kh√°m:', error);

            const errorMessage = getErrorMessage(error, 'C√≥ l·ªói x·∫£y ra khi ho√†n th√†nh kh√°m');
            setAlert({ type: 'danger', message: errorMessage });
        } finally {
            setSaving(false);
        }
    };

    if (loading) return <Loading />;

    if (!appointment) {
        return (
            <div className="container-fluid">
                <Alert variant="danger">Kh√¥ng t√¨m th·∫•y th√¥ng tin l·ªãch h·∫πn</Alert>
            </div>
        );
    }

    const handleViewHistoryDetail = (medicalRecordId: string) => {
        if (!medicalRecordId) {
            return;
        }

        if (medicalRecordId === appointmentId) {
            setShowHistoryModal(false);
            message.info('B·∫°n ƒëang xem phi·∫øu kh√°m n√†y.');
            return;
        }

        router.push(`/bac-si/kham-benh/${medicalRecordId}`);
    };

    return (
        <div className="container-fluid">
            <style>{printStyles}</style>
            <div className="d-flex justify-content-between align-items-center mb-4 no-print">
                <h2>Kh√°m b·ªánh - {medicalRecord?.patientName || appointment.fullName}</h2>
                <div className="d-flex gap-2">
                    {medicalRecord?.patientId && (
                        <Button
                            variant="outline-info"
                            onClick={() => setShowHistoryModal(true)}
                        >
                            <IconHistory size={16} className="me-2" />
                            L·ªãch s·ª≠ kh√°m b·ªánh
                        </Button>
                    )}
                    <Button
                        variant="outline-secondary"
                        onClick={() => router.push('/bac-si/kham-benh')}
                    >
                        Quay l·∫°i danh s√°ch
                    </Button>
                </div>
            </div>

            {alert && (
                <Alert
                    variant={alert.type}
                    dismissible
                    onClose={() => setAlert(null)}
                    className="mb-4"
                >
                    {alert.message}
                </Alert>
            )}

            <Row>
                {/* Form kh√°m b·ªánh - To√†n chi·ªÅu r·ªông */}
                <Col lg={12}>
                    <Card className="shadow-sm">
                        <Card.Header>
                            <ClipboardData className="me-2" />
                            Th√¥ng tin kh√°m b·ªánh
                        </Card.Header>
                        <Card.Body>
                            <Tabs
                                activeKey={activeTab}
                                onSelect={(k) => setActiveTab(k || 'patient-info')}
                                className="mb-4"
                            >
                                <Tab eventKey="patient-info" title={
                                    <span>
                                        <PersonFill className="me-1" />
                                        Th√¥ng tin b·ªánh nh√¢n
                                    </span>
                                }>
                                    <Row>
                                        <Col md={3}>
                                            <div className="mb-3">
                                                <strong>H·ªç t√™n:</strong><br />
                                                {medicalRecord?.patientName || appointment.fullName}
                                            </div>
                                            <div className="mb-3">
                                                <strong>S·ªë ƒëi·ªán tho·∫°i:</strong><br />
                                                {medicalRecord?.patientPhone || appointment.phone || 'Kh√¥ng c√≥'}
                                            </div>
                                        </Col>
                                        <Col md={3}>
                                            <div className="mb-3">
                                                <strong>Ng√†y sinh:</strong><br />
                                                {appointment.birth || 'Kh√¥ng c√≥'}
                                            </div>
                                            <div className="mb-3">
                                                <strong>Gi·ªõi t√≠nh:</strong><br />
                                                {medicalRecord?.patientGender === 'NAM' ? 'Nam' : medicalRecord?.patientGender === 'NU' ? 'N·ªØ' : appointment.gender || 'Kh√¥ng x√°c ƒë·ªãnh'}
                                            </div>
                                        </Col>
                                        <Col md={3}>
                                            <div className="mb-3">
                                                <strong>ƒê·ªãa ch·ªâ:</strong><br />
                                                {medicalRecord?.patientAddress || appointment.address || 'Kh√¥ng c√≥'}
                                            </div>
                                            <div className="mb-3">
                                                <strong>M√£ phi·∫øu kh√°m:</strong><br />
                                                {medicalRecord?.code || 'ƒêang t·∫°o...'}
                                            </div>
                                        </Col>
                                        <Col md={3}>
                                            <div className="mb-3">
                                                <strong>Th·ªùi gian kh√°m:</strong><br />
                                                {medicalRecord?.date ? new Date(medicalRecord.date).toLocaleString('vi-VN') : (appointment.time && appointment.date ? `${appointment.time} - ${appointment.date}` : 'Kh√¥ng c√≥')}
                                            </div>
                                            <div className="mb-3">
                                                <strong>Tri·ªáu ch·ª©ng ban ƒë·∫ßu:</strong><br />
                                                <span className="text-muted">{medicalRecord?.symptoms || appointment.symptoms || 'Kh√¥ng c√≥'}</span>
                                            </div>
                                        </Col>
                                    </Row>
                                </Tab>

                                <Tab eventKey="examination" title={
                                    <span>
                                        <ClipboardData className="me-1" />
                                        Kh√°m b·ªánh
                                    </span>
                                }>
                                    <Form>
                                        <Row>
                                            <Col md={6}>
                                                <Form.Group className="mb-3">
                                                    <Form.Label>Tri·ªáu ch·ª©ng <span className="text-danger">*</span></Form.Label>
                                                    <Form.Control
                                                        as="textarea"
                                                        rows={3}
                                                        placeholder="M√¥ t·∫£ tri·ªáu ch·ª©ng chi ti·∫øt..."
                                                        value={examinationData.trieuChung}
                                                        onChange={(e) => handleInputChange('trieuChung', e.target.value)}
                                                        readOnly={medicalRecord?.status === MedicalRecordStatus.HOAN_THANH}
                                                    />
                                                </Form.Group>
                                            </Col>
                                            <Col md={6}>
                                                <Form.Group className="mb-3">
                                                    <Form.Label>Ch·∫©n ƒëo√°n <span className="text-danger">*</span></Form.Label>
                                                    <Form.Control
                                                        as="textarea"
                                                        rows={3}
                                                        placeholder="K·∫øt qu·∫£ ch·∫©n ƒëo√°n..."
                                                        value={examinationData.chanDoan}
                                                        onChange={(e) => handleInputChange('chanDoan', e.target.value)}
                                                        readOnly={medicalRecord?.status === MedicalRecordStatus.HOAN_THANH}
                                                    />
                                                </Form.Group>
                                            </Col>
                                        </Row>

                                        <Form.Group className="mb-3">
                                            <Form.Label>H∆∞·ªõng ƒëi·ªÅu tr·ªã</Form.Label>
                                            <Form.Control
                                                as="textarea"
                                                rows={3}
                                                placeholder="H∆∞·ªõng ƒëi·ªÅu tr·ªã v√† l·ªùi khuy√™n..."
                                                value={examinationData.huongDieuTri}
                                                onChange={(e) => handleInputChange('huongDieuTri', e.target.value)}
                                                readOnly={medicalRecord?.status === MedicalRecordStatus.HOAN_THANH}
                                            />
                                        </Form.Group>

                                        <Form.Group className="mb-3">
                                            <Form.Label>Ghi ch√∫</Form.Label>
                                            <Form.Control
                                                as="textarea"
                                                rows={2}
                                                placeholder="Ghi ch√∫ th√™m..."
                                                value={examinationData.ghiChu}
                                                onChange={(e) => handleInputChange('ghiChu', e.target.value)}
                                                readOnly={medicalRecord?.status === MedicalRecordStatus.HOAN_THANH}
                                            />
                                        </Form.Group>
                                    </Form>
                                </Tab>

                                <Tab eventKey="services" title={
                                    <span>
                                        <Activity className="me-1" />
                                        D·ªãch v·ª• & Ch·ªâ ƒë·ªãnh
                                    </span>
                                }>
                                    {/* Ph·∫ßn D·ªãch v·ª• hi·ªán t·∫°i */}
                                    <div className="mb-4">
                                        <div className="d-flex justify-content-between align-items-center mb-3">
                                            <h6 className="mb-0">
                                                <Activity className="me-2" />
                                                Danh s√°ch ch·ªâ ƒë·ªãnh trong l·∫ßn kh√°m
                                                <Badge bg="primary" className="ms-2">
                                                    {paidServices.length} ch·ªâ ƒë·ªãnh
                                                </Badge>
                                            </h6>
                                            {/* Ch·ªâ hi·ªÉn th·ªã n√∫t th√™m ch·ªâ ƒë·ªãnh khi ch∆∞a ho√†n th√†nh */}
                                            {medicalRecord?.status !== MedicalRecordStatus.HOAN_THANH && (
                                                <div className="d-flex gap-2">
                                                    <Button
                                                        variant="primary"
                                                        size="sm"
                                                        onClick={() => setShowAddPrescriptionModal(true)}
                                                        className="d-flex align-items-center"
                                                    >
                                                        <Plus className="me-1" size={16} />
                                                        Th√™m ch·ªâ ƒë·ªãnh m·ªõi
                                                    </Button>
                                                </div>
                                            )}
                                        </div>
                                        {paidServices.length > 0 ? (
                                            <Table striped bordered hover responsive>
                                                <thead>
                                                    <tr>
                                                        <th style={{ width: '50px' }}>STT</th>
                                                        <th style={{ width: '220px' }}>T√™n d·ªãch v·ª•</th>
                                                        <th style={{ width: '130px' }}>B√°c sƒ© th·ª±c hi·ªán</th>
                                                        <th style={{ width: '150px' }}>Ph√≤ng ch·ªâ ƒë·ªãnh</th>
                                                        <th style={{ width: '120px' }}>TT Thanh to√°n</th>
                                                        <th style={{ width: '120px' }}>TT Th·ª±c hi·ªán</th>
                                                        <th style={{ width: '130px' }}>Ng√†y ch·ªâ ƒë·ªãnh</th>
                                                        <th style={{ width: '150px' }}>Thao t√°c</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    {paidServices.map((service, index) => (
                                                        <tr key={service.id}>
                                                            <td>{index + 1}</td>
                                                            <td>
                                                                <div>
                                                                    <div>{service.serviceName}</div>
                                                                    {service.serviceParent && (
                                                                        <small className="text-muted fst-italic">
                                                                            <i className="bi bi-box-seam me-1"></i>
                                                                            Thu·ªôc g√≥i: {service.serviceParent}
                                                                        </small>
                                                                    )}
                                                                </div>
                                                            </td>
                                                            <td>{service.assignedDoctor || 'Ch∆∞a c√≥'}</td>
                                                            <td>
                                                                <span className="text-dark" style={{ fontSize: '0.9em' }}>
                                                                    {service.room && service.room.trim() !== '' ?
                                                                        service.room :
                                                                        <span className="text-muted fst-italic">Ch∆∞a x√°c ƒë·ªãnh</span>
                                                                    }
                                                                </span>
                                                            </td>
                                                            <td>
                                                                <Badge bg={service.status === ServiceStatus.DA_THANH_TOAN ? 'success' : 'warning'}>
                                                                    {service.status === ServiceStatus.DA_THANH_TOAN ? 'ƒê√£ thanh to√°n' : 'Ch·ªù thanh to√°n'}
                                                                </Badge>
                                                            </td>
                                                            <td>
                                                                <Badge bg={
                                                                    service.executionStatus === 'HOAN_THANH' ? 'success' :
                                                                        service.executionStatus === 'DANG_THUC_HIEN' ? 'warning' :
                                                                            service.executionStatus === 'HUY' ? 'danger' : 'secondary'
                                                                }>
                                                                    {service.executionStatus === 'CHO_THUC_HIEN' ? 'Ch·ªù th·ª±c hi·ªán' :
                                                                        service.executionStatus === 'DANG_THUC_HIEN' ? 'ƒêang th·ª±c hi·ªán' :
                                                                            service.executionStatus === 'HOAN_THANH' ? 'Ho√†n th√†nh' :
                                                                                service.executionStatus === 'HUY' ? 'H·ªßy' : 'Ch∆∞a x√°c ƒë·ªãnh'}
                                                                </Badge>
                                                            </td>
                                                            <td>
                                                                {service.orderDate ?
                                                                    new Date(service.orderDate).toLocaleString('vi-VN', {
                                                                        day: '2-digit',
                                                                        month: '2-digit',
                                                                        year: 'numeric',
                                                                        hour: '2-digit',
                                                                        minute: '2-digit'
                                                                    }) :
                                                                    'Ch∆∞a c√≥'
                                                                }
                                                            </td>

                                                            <td>
                                                                <div className="d-flex gap-1">
                                                                    {/* N√∫t xem chi ti·∫øt - hi·ªÉn th·ªã cho t·∫•t c·∫£ */}
                                                                    <Button
                                                                        variant="outline-primary"
                                                                        size="sm"
                                                                        onClick={() => handleEditPrescription(service.id)}
                                                                        title="Xem chi ti·∫øt ch·ªâ ƒë·ªãnh"
                                                                        disabled={loadingLabOrderDetail}
                                                                    >
                                                                        {loadingLabOrderDetail ? (
                                                                            <span className="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                                                        ) : (
                                                                            'Chi ti·∫øt'
                                                                        )}
                                                                    </Button>

                                                                    {/* N√∫t xem k·∫øt qu·∫£ - ch·ªâ hi·ªÉn th·ªã khi ƒë√£ ho√†n th√†nh ho·∫∑c ƒëang th·ª±c hi·ªán */}
                                                                    {service.executionStatus && ['DANG_THUC_HIEN', 'HOAN_THANH'].includes(service.executionStatus) && (
                                                                        <Button
                                                                            variant="outline-success"
                                                                            size="sm"
                                                                            onClick={() => handleViewResult(service.id)}
                                                                            title="Xem k·∫øt qu·∫£ d·ªãch v·ª•"
                                                                        >
                                                                            Xem k·∫øt qu·∫£
                                                                        </Button>
                                                                    )}
                                                                </div>
                                                            </td>
                                                        </tr>
                                                    ))}
                                                </tbody>
                                            </Table>
                                        ) : (
                                            <Alert variant="info" className="text-center py-4">
                                                <Receipt size={48} className="mb-2" />
                                                <p className="mb-0">Ch∆∞a c√≥ d·ªãch v·ª• n√†o ƒë√£ thanh to√°n trong l·∫ßn kh√°m n√†y.</p>
                                                <small className="text-muted">B·ªánh nh√¢n c·∫ßn thanh to√°n d·ªãch v·ª• tr∆∞·ªõc khi b√°c sƒ© c√≥ th·ªÉ th·ª±c hi·ªán kh√°m.</small>
                                            </Alert>
                                        )}
                                    </div>
                                </Tab>

                                <Tab eventKey="prescription" title={
                                    <span>
                                        <Capsule className="me-1" />
                                        ƒê∆°n thu·ªëc
                                    </span>
                                }>
                                    {medicalRecord?.id && (
                                        <PrescriptionManagement
                                            medicalRecordId={parseInt(medicalRecord.id.toString())}
                                            readonly={medicalRecord.status === MedicalRecordStatus.HOAN_THANH}
                                        />
                                    )}
                                </Tab>
                            </Tabs>

                            {/* Ch·ªâ hi·ªÉn th·ªã c√°c n√∫t khi ch∆∞a ho√†n th√†nh */}
                            {medicalRecord?.status !== MedicalRecordStatus.HOAN_THANH && (
                                <div className="d-flex justify-content-end gap-2">
                                    <Button
                                        variant="outline-primary"
                                        onClick={handleSaveExamination}
                                        disabled={saving}
                                    >
                                        <Save className="me-1" />
                                        {saving ? 'ƒêang l∆∞u...' : 'L∆∞u t·∫°m'}
                                    </Button>
                                    <Button
                                        variant="success"
                                        onClick={handleCompleteExamination}
                                        disabled={saving || !examinationData.chanDoan.trim()}
                                    >
                                        Ho√†n th√†nh kh√°m
                                    </Button>
                                </div>
                            )}

                            {/* Hi·ªÉn th·ªã th√¥ng b√°o khi ƒë√£ ho√†n th√†nh */}
                            {medicalRecord?.status === MedicalRecordStatus.HOAN_THANH && (
                                <div className="text-center py-3 border-top">
                                    <Alert variant="success" className="mb-0">
                                        <i className="bi bi-check-circle-fill me-2"></i>
                                        <strong>Phi·∫øu kh√°m ƒë√£ ƒë∆∞·ª£c ho√†n th√†nh</strong>
                                        <br />
                                        <small>B·∫°n c√≥ th·ªÉ xem l·∫°i th√¥ng tin kh√°m b·ªánh nh∆∞ng kh√¥ng th·ªÉ ch·ªânh s·ª≠a.</small>
                                    </Alert>
                                </div>
                            )}
                        </Card.Body>
                    </Card>
                </Col>
            </Row>

            {/* Modal th√™m ch·ªâ ƒë·ªãnh m·ªõi */}
            <Modal show={showAddPrescriptionModal} onHide={() => {
                setShowAddPrescriptionModal(false);
                setSelectedService(null);
                setSelectedDoctorId(null);
                setPrescriptionReason('');
                setPrescriptionNotes('');
                setServiceDetail(null);
            }} size="lg">
                <Modal.Header closeButton>
                    <Modal.Title>Th√™m ch·ªâ ƒë·ªãnh m·ªõi</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    <Form>
                        {/* T√¨m ki·∫øm d·ªãch v·ª• */}
                        <Form.Group className="mb-3">
                            <Form.Label>T√¨m ki·∫øm d·ªãch v·ª• <span className="text-danger">*</span></Form.Label>
                            <ServiceSearchInput
                                onServiceSelect={handleServiceSelect}
                                placeholder="Nh·∫≠p t√™n d·ªãch v·ª• ƒë·ªÉ t√¨m ki·∫øm..."
                                selectedService={selectedService}
                            />
                            <Form.Text className="text-muted">
                                Nh·∫≠p √≠t nh·∫•t 2 k√Ω t·ª± ƒë·ªÉ b·∫Øt ƒë·∫ßu t√¨m ki·∫øm
                            </Form.Text>
                        </Form.Group>

                        {/* Hi·ªÉn th·ªã th√¥ng tin d·ªãch v·ª• ƒë√£ ch·ªçn */}
                        {selectedService && (
                            <Alert variant="info" className="mb-3">
                                <div className="d-flex justify-content-between align-items-start">
                                    <div>
                                        <strong>D·ªãch v·ª• ƒë√£ ch·ªçn:</strong> {selectedService.name}<br />
                                        <small className="text-muted">
                                            M√£: {selectedService.code} | Ph√≤ng: {selectedService.roomName}
                                        </small>
                                    </div>
                                    <div className="text-end">
                                        <strong className="text-primary">{selectedService.price.toLocaleString('vi-VN')}ƒë</strong>
                                    </div>
                                </div>
                            </Alert>
                        )}

                        {/* Ch·ªçn b√°c sƒ© th·ª±c hi·ªán */}
                        {selectedService && serviceDetail && (
                            <Form.Group className="mb-3">
                                <Form.Label>B√°c sƒ© th·ª±c hi·ªán <span className="text-danger">*</span></Form.Label>
                                <Form.Select
                                    value={selectedDoctorId || ''}
                                    onChange={(e) => setSelectedDoctorId(Number(e.target.value) || null)}
                                    disabled={loadingServiceDetail || !serviceDetail.doctorsAssigned?.length}
                                >
                                    <option value="">-- Ch·ªçn b√°c sƒ© th·ª±c hi·ªán --</option>
                                    {serviceDetail.doctorsAssigned?.map(doctor => (
                                        <option key={doctor.id} value={doctor.id}>
                                            {doctor.fullName} - {doctor.position} ({doctor.shift === 'SANG' ? 'Ca s√°ng' : 'Ca chi·ªÅu'})
                                            {!doctor.available && ' - Kh√¥ng kh·∫£ d·ª•ng'}
                                        </option>
                                    ))}
                                </Form.Select>
                                <Form.Text className="text-muted">
                                    Danh s√°ch b√°c sƒ© ƒë∆∞·ª£c ph√¢n c√¥ng cho d·ªãch v·ª• n√†y
                                </Form.Text>
                            </Form.Group>
                        )}

                        {/* L√Ω do ch·ªâ ƒë·ªãnh */}
                        <Form.Group className="mb-3">
                            <Form.Label>L√Ω do ch·ªâ ƒë·ªãnh / Ch·∫©n ƒëo√°n <span className="text-danger">*</span></Form.Label>
                            <Form.Control
                                as="textarea"
                                rows={3}
                                placeholder="Nh·∫≠p l√Ω do ch·ªâ ƒë·ªãnh d·ªãch v·ª• n√†y ho·∫∑c ch·∫©n ƒëo√°n li√™n quan..."
                                value={prescriptionReason}
                                onChange={(e) => setPrescriptionReason(e.target.value)}
                            />
                        </Form.Group>

                        {/* Ghi ch√∫ */}
                        <Form.Group className="mb-3">
                            <Form.Label>Ghi ch√∫ b·ªï sung</Form.Label>
                            <Form.Control
                                as="textarea"
                                rows={2}
                                placeholder="Ghi ch√∫ th√™m (n·∫øu c√≥)..."
                                value={prescriptionNotes}
                                onChange={(e) => setPrescriptionNotes(e.target.value)}
                            />
                        </Form.Group>

                        {/* Preview th√¥ng tin ch·ªâ ƒë·ªãnh */}
                        {selectedService && selectedDoctorId && prescriptionReason && (
                            <Alert variant="success" className="mb-0">
                                <h6 className="alert-heading">
                                    <Check className="me-2" />
                                    Xem tr∆∞·ªõc ch·ªâ ƒë·ªãnh
                                </h6>
                                <hr />
                                <Row>
                                    <Col md={6}>
                                        <small><strong>D·ªãch v·ª•:</strong> {selectedService.name}</small>
                                    </Col>
                                    <Col md={6}>
                                        <small><strong>Gi√°:</strong> {selectedService.price.toLocaleString('vi-VN')}ƒë</small>
                                    </Col>
                                    <Col md={6} className="mt-2">
                                        <small><strong>B√°c sƒ© th·ª±c hi·ªán:</strong> {serviceDetail?.doctorsAssigned?.find(d => d.id === selectedDoctorId)?.fullName || 'N/A'}</small>
                                    </Col>
                                    <Col md={6} className="mt-2">
                                        <small><strong>Ph√≤ng:</strong> {selectedService.roomName}</small>
                                    </Col>
                                    <Col md={12} className="mt-2">
                                        <small><strong>L√Ω do:</strong> {prescriptionReason}</small>
                                    </Col>
                                    {prescriptionNotes && (
                                        <Col md={12} className="mt-2">
                                            <small><strong>Ghi ch√∫:</strong> {prescriptionNotes}</small>
                                        </Col>
                                    )}
                                </Row>
                            </Alert>
                        )}
                    </Form>
                </Modal.Body>
                <Modal.Footer>
                    <Button variant="secondary" onClick={() => {
                        setShowAddPrescriptionModal(false);
                        setSelectedService(null);
                        setSelectedDoctorId(null);
                        setPrescriptionReason('');
                        setPrescriptionNotes('');
                        setServiceDetail(null);
                    }}>
                        H·ªßy
                    </Button>
                    <Button
                        variant="primary"
                        onClick={handleAddPrescription}
                        disabled={!selectedService || !selectedDoctorId || !prescriptionReason.trim() || saving}
                    >
                        <Plus className="me-1" />
                        {saving ? 'ƒêang th√™m...' : 'Th√™m ch·ªâ ƒë·ªãnh'}
                    </Button>
                </Modal.Footer>
            </Modal>

            {/* Modal s·ª≠a d·ªãch v·ª• hi·ªán c√≥ */}
            <Modal show={showEditServiceModal} onHide={() => setShowEditServiceModal(false)} size="lg">
                <Modal.Header closeButton>
                    <Modal.Title>Ch·ªânh s·ª≠a th√¥ng tin d·ªãch v·ª•</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    <Form>
                        <Form.Group className="mb-3">
                            <Form.Label>T√™n d·ªãch v·ª•</Form.Label>
                            <Form.Control
                                type="text"
                                value={editingService?.serviceName || ''}
                                disabled
                                className="bg-light"
                            />
                            <Form.Text className="text-muted">
                                Kh√¥ng th·ªÉ thay ƒë·ªïi t√™n d·ªãch v·ª•
                            </Form.Text>
                        </Form.Group>

                        <Form.Group className="mb-3">
                            <Form.Label>B√°c sƒ© ch·ªâ ƒë·ªãnh</Form.Label>
                            <Form.Select
                                value={serviceDoctor}
                                onChange={(e) => setServiceDoctor(e.target.value)}
                            >
                                <option value="">-- Ch·ªçn b√°c sƒ© ch·ªâ ƒë·ªãnh --</option>
                                <option value={user?.doctor?.fullName || ''}>
                                    {user?.doctor?.fullName} (Hi·ªán t·∫°i)
                                </option>
                                {availableDoctors.map(doctor => (
                                    <option key={doctor.id} value={doctor.name}>
                                        {doctor.name} - {doctor.specialty}
                                    </option>
                                ))}
                            </Form.Select>
                        </Form.Group>

                        <Form.Group className="mb-3">
                            <Form.Label>L√Ω do ch·ªâ ƒë·ªãnh <span className="text-danger">*</span></Form.Label>
                            <Form.Control
                                as="textarea"
                                rows={3}
                                placeholder="Nh·∫≠p l√Ω do ch·ªâ ƒë·ªãnh d·ªãch v·ª• n√†y..."
                                value={serviceReason}
                                onChange={(e) => setServiceReason(e.target.value)}
                            />
                        </Form.Group>

                        <Form.Group className="mb-3">
                            <Form.Label>Ghi ch√∫</Form.Label>
                            <Form.Control
                                as="textarea"
                                rows={2}
                                placeholder="Ghi ch√∫ th√™m (n·∫øu c√≥)..."
                                value={serviceNotes}
                                onChange={(e) => setServiceNotes(e.target.value)}
                            />
                        </Form.Group>
                    </Form>
                </Modal.Body>
                <Modal.Footer>
                    <Button variant="secondary" onClick={() => setShowEditServiceModal(false)}>
                        H·ªßy
                    </Button>
                    <Button variant="primary" onClick={handleUpdateService}>
                        <Check className="me-1" />
                        C·∫≠p nh·∫≠t d·ªãch v·ª•
                    </Button>
                </Modal.Footer>
            </Modal>

            {/* Modal s·ª≠a ch·ªâ ƒë·ªãnh */}
            <Modal show={showEditPrescriptionModal} onHide={() => setShowEditPrescriptionModal(false)} size="lg">
                <Modal.Header closeButton>
                    <Modal.Title>Chi ti·∫øt ch·ªâ ƒë·ªãnh</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    {loadingLabOrderDetail && (
                        <div className="text-center mb-3">
                            <div className="spinner-border text-primary" role="status">
                                <span className="visually-hidden">ƒêang t·∫£i chi ti·∫øt ch·ªâ ƒë·ªãnh...</span>
                            </div>
                            <p className="mt-2 text-muted">ƒêang t·∫£i th√¥ng tin chi ti·∫øt ch·ªâ ƒë·ªãnh...</p>
                        </div>
                    )}

                    {labOrderDetail && (
                        <div className="alert alert-info mb-3">
                            <h6 className="alert-heading mb-2">
                                <InfoCircle className="me-2" />
                                Th√¥ng tin chi ti·∫øt ch·ªâ ƒë·ªãnh
                            </h6>
                            <div className="row">
                                <div className="col-md-6">
                                    <strong>M√£ ch·ªâ ƒë·ªãnh:</strong> #{labOrderDetail.id}
                                </div>
                                <div className="col-md-6">
                                    <strong>T√™n d·ªãch v·ª•:</strong> {labOrderDetail.healthPlanName}
                                </div>
                                <div className="col-md-6 mt-2">
                                    <strong>Gi√° d·ªãch v·ª•:</strong> {labOrderDetail.price?.toLocaleString()} ƒë
                                </div>
                                <div className="col-md-6 mt-2">
                                    <strong>Ph√≤ng th·ª±c hi·ªán:</strong> {labOrderDetail.room || 'Ch∆∞a x√°c ƒë·ªãnh'}
                                </div>
                                <div className="col-md-6 mt-2">
                                    <strong>B√°c sƒ© ch·ªâ ƒë·ªãnh:</strong> {labOrderDetail.doctorOrdered || 'Ch∆∞a c√≥'}
                                </div>
                                <div className="col-md-6 mt-2">
                                    <strong>B√°c sƒ© th·ª±c hi·ªán:</strong> {labOrderDetail.doctorPerformed || 'Ch∆∞a c√≥'}
                                </div>
                                <div className="col-md-6 mt-2">
                                    <strong>Tr·∫°ng th√°i:</strong>{' '}
                                    <Badge bg={
                                        labOrderDetail.status === 'HOAN_THANH' ? 'success' :
                                            labOrderDetail.status === 'DANG_THUC_HIEN' ? 'warning' :
                                                labOrderDetail.status === 'HUY_BO' ? 'danger' : 'secondary'
                                    }>
                                        {labOrderDetail.status === 'CHO_THUC_HIEN' ? 'Ch·ªù th·ª±c hi·ªán' :
                                            labOrderDetail.status === 'DANG_THUC_HIEN' ? 'ƒêang th·ª±c hi·ªán' :
                                                labOrderDetail.status === 'HOAN_THANH' ? 'Ho√†n th√†nh' : 'H·ªßy'}
                                    </Badge>
                                </div>
                                {/* <div className="col-md-6 mt-2">
                                    <strong>Tr·∫°ng th√°i thanh to√°n:</strong>{' '}
                                    <Badge bg={labOrderDetail.statusPayment === 'DA_THANH_TOAN' ? 'success' : 'warning'}>
                                        {labOrderDetail.statusPayment === 'DA_THANH_TOAN' ? 'ƒê√£ thanh to√°n' : 'Ch∆∞a thanh to√°n'}
                                    </Badge>
                                </div> */}
                                <div className="col-12 mt-2">
                                    <strong>Ng√†y ch·ªâ ƒë·ªãnh:</strong> {new Date(labOrderDetail.orderDate).toLocaleString('vi-VN')}
                                </div>
                                {labOrderDetail.expectedResultDate && (
                                    <div className="col-12 mt-2">
                                        <strong>Ng√†y d·ª± ki·∫øn c√≥ k·∫øt qu·∫£:</strong> {new Date(labOrderDetail.expectedResultDate).toLocaleString('vi-VN')}
                                    </div>
                                )}
                            </div>
                        </div>
                    )}

                    {/* Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt d·ªãch v·ª• t·ª´ API services */}
                    {serviceDetail && (
                        <div className="alert alert-success mb-3">
                            <h6 className="alert-heading mb-2">
                                <Gear className="me-2" />
                                Th√¥ng tin d·ªãch v·ª•
                            </h6>
                            <div className="row">
                                <div className="col-12">
                                    <strong>M√£ d·ªãch v·ª•:</strong> {serviceDetail.code}
                                </div>
                                <div className="col-12 mt-2">
                                    <strong>T√™n d·ªãch v·ª•:</strong> {serviceDetail.name}
                                </div>
                                <div className="col-12 mt-2">
                                    <strong>Gi√° d·ªãch v·ª•:</strong> {serviceDetail.price?.toLocaleString()} ƒë
                                </div>
                                <div className="col-12 mt-2">
                                    <strong>M√¥ t·∫£:</strong> {serviceDetail.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}
                                </div>

                            </div>
                        </div>
                    )}

                    <Form>
                        {/* Ch·ªâ hi·ªÉn th·ªã c√°c tr∆∞·ªùng edit khi tr·∫°ng th√°i cho ph√©p (CHO_THUC_HIEN) */}
                        {labOrderDetail?.status === 'CHO_THUC_HIEN' && (
                            <>
                                {/* Dropdown ch·ªçn b√°c sƒ© th·ª±c hi·ªán */}
                                <Form.Group className="mb-3">
                                    <Form.Label>B√°c sƒ© th·ª±c hi·ªán</Form.Label>
                                    <Form.Select
                                        value={selectedDoctor}
                                        onChange={(e) => setSelectedDoctor(e.target.value)}
                                        disabled={loadingLabOrderDetail}
                                    >
                                        <option value="">-- Ch·ªçn b√°c sƒ© th·ª±c hi·ªán --</option>

                                        {/* Ch·ªâ hi·ªÉn th·ªã b√°c sƒ© ƒë∆∞·ª£c ph√¢n c√¥ng cho d·ªãch v·ª• n√†y */}
                                        {availableDoctorsForAssignment.length > 0 && (
                                            <>
                                                {availableDoctorsForAssignment.map(doctor => (
                                                    <option key={`assigned-${doctor.id}`} value={doctor.fullName}>
                                                        {doctor.fullName}
                                                    </option>
                                                ))}
                                            </>
                                        )}
                                    </Form.Select>
                                </Form.Group>

                                <Form.Group className="mb-3">
                                    <Form.Label>Ghi ch√∫ b·ªï sung</Form.Label>
                                    <Form.Control
                                        as="textarea"
                                        rows={3}
                                        placeholder="Th√™m ghi ch√∫ cho ch·ªâ ƒë·ªãnh n√†y..."
                                        value={prescriptionNotes}
                                        onChange={(e) => setPrescriptionNotes(e.target.value)}
                                    />
                                </Form.Group>
                            </>
                        )}

                        {/* Hi·ªÉn th·ªã th√¥ng b√°o khi kh√¥ng th·ªÉ ch·ªânh s·ª≠a */}
                        {labOrderDetail?.status && ['DANG_THUC_HIEN', 'HOAN_THANH', 'HUY_BO'].includes(labOrderDetail.status) && (
                            <Alert variant="info">
                                <InfoCircle className="me-2" />
                                <strong>Tr·∫°ng th√°i:</strong> {
                                    labOrderDetail.status === 'DANG_THUC_HIEN' ? 'ƒêang th·ª±c hi·ªán' :
                                        labOrderDetail.status === 'HOAN_THANH' ? 'ƒê√£ ho√†n th√†nh' :
                                            labOrderDetail.status === 'HUY_BO' ? 'ƒê√£ h·ªßy' : labOrderDetail.status
                                }
                                <br />
                                <small className="text-muted">
                                    Kh√¥ng th·ªÉ ch·ªânh s·ª≠a th√¥ng tin b√°c sƒ© ch·ªâ ƒë·ªãnh khi d·ªãch v·ª• ƒë√£ b·∫Øt ƒë·∫ßu th·ª±c hi·ªán ho·∫∑c ho√†n th√†nh.
                                </small>
                            </Alert>
                        )}
                    </Form>
                </Modal.Body>
                <Modal.Footer>
                    <Button variant="secondary" onClick={() => setShowEditPrescriptionModal(false)}>
                        ƒê√≥ng
                    </Button>

                    {/* Ch·ªâ hi·ªÉn th·ªã n√∫t c·∫≠p nh·∫≠t khi tr·∫°ng th√°i cho ph√©p */}
                    {labOrderDetail?.status === 'CHO_THUC_HIEN' && (
                        <Button
                            variant="primary"
                            onClick={handleUpdateLabOrder}
                            disabled={!selectedDoctor || loadingLabOrderDetail || saving}
                        >
                            <Check className="me-1" />
                            {saving ? 'ƒêang c·∫≠p nh·∫≠t...' : 'C·∫≠p nh·∫≠t b√°c sƒ© ch·ªâ ƒë·ªãnh'}
                        </Button>
                    )}
                </Modal.Footer>
            </Modal>

            {typeof medicalRecord?.patientId === 'number' && medicalRecord && (
                <MedicalRecordHistory
                    show={showHistoryModal}
                    onHide={() => setShowHistoryModal(false)}
                    patientId={medicalRecord.patientId}
                    patientName={medicalRecord.patientName}
                    currentMedicalRecordId={medicalRecord.id}
                    onViewDetail={handleViewHistoryDetail}
                />
            )}

            {/* Modal xem k·∫øt qu·∫£ x√©t nghi·ªám */}
            <Modal
                show={showResultModal}
                onHide={() => setShowResultModal(false)}
                size="lg"
                centered
            >
                <Modal.Header closeButton>
                    <Modal.Title>
                        <FileText className="me-2" />
                        K·∫øt qu·∫£ x√©t nghi·ªám
                    </Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    {loadingLabResult ? (
                        <div className="text-center py-4">
                            <div className="spinner-border text-primary" role="status">
                                <span className="visually-hidden">ƒêang t·∫£i...</span>
                            </div>
                            <p className="mt-2 text-muted">ƒêang t·∫£i k·∫øt qu·∫£ x√©t nghi·ªám...</p>
                        </div>
                    ) : selectedLabResult ? (
                        <div>
                            {/* Th√¥ng tin ch·ªâ ƒë·ªãnh */}
                            <Card className="mb-3">
                                <Card.Header className="bg-light">
                                    <h6 className="mb-0">Th√¥ng tin ch·ªâ ƒë·ªãnh</h6>
                                </Card.Header>
                                <Card.Body>
                                    <Row>
                                        <Col md={6}>
                                            <p><strong>D·ªãch v·ª•:</strong> {selectedLabResult.healthPlanName}</p>
                                            <p><strong>M√£ ch·ªâ ƒë·ªãnh:</strong> {selectedLabResult.code || `#${selectedLabResult.id}`}</p>
                                            <p><strong>Ph√≤ng:</strong> {selectedLabResult.room || 'Ch∆∞a x√°c ƒë·ªãnh'}</p>
                                        </Col>
                                        <Col md={6}>
                                            <p><strong>B√°c sƒ© ch·ªâ ƒë·ªãnh:</strong> {selectedLabResult.doctorOrdered || 'Ch∆∞a x√°c ƒë·ªãnh'}</p>
                                            <p><strong>B√°c sƒ© th·ª±c hi·ªán:</strong> {selectedLabResult.doctorPerformed || 'Ch∆∞a x√°c ƒë·ªãnh'}</p>
                                            <p><strong>Ng√†y ch·ªâ ƒë·ªãnh:</strong> {new Date(selectedLabResult.orderDate).toLocaleString('vi-VN')}</p>
                                        </Col>
                                    </Row>
                                    {selectedLabResult.diagnosis && (
                                        <p><strong>Ch·∫©n ƒëo√°n:</strong> {selectedLabResult.diagnosis}</p>
                                    )}
                                    <p><strong>Tr·∫°ng th√°i:</strong>
                                        <Badge
                                            bg={selectedLabResult.status === 'HOAN_THANH' ? 'success' : 'info'}
                                            className="ms-2"
                                        >
                                            {selectedLabResult.status === 'HOAN_THANH' ? 'Ho√†n th√†nh' :
                                                selectedLabResult.status === 'DANG_THUC_HIEN' ? 'ƒêang th·ª±c hi·ªán' :
                                                    selectedLabResult.status}
                                        </Badge>
                                    </p>
                                </Card.Body>
                            </Card>

                            {/* K·∫øt qu·∫£ x√©t nghi·ªám */}
                            {selectedLabResult.labResultResponse ? (
                                <Card>
                                    <Card.Header className="bg-success text-white">
                                        <h6 className="mb-0">K·∫øt qu·∫£ x√©t nghi·ªám</h6>
                                    </Card.Header>
                                    <Card.Body>
                                        <div className="mb-3">
                                            <strong>Ng√†y th·ª±c hi·ªán:</strong>
                                            <p className="mt-1">
                                                {new Date(selectedLabResult.labResultResponse.date).toLocaleString('vi-VN')}
                                            </p>
                                        </div>

                                        <div className="mb-3">
                                            <strong>Chi ti·∫øt k·∫øt qu·∫£:</strong>
                                            <div className="mt-1 p-3 bg-light rounded">
                                                {selectedLabResult.labResultResponse.resultDetails}
                                            </div>
                                        </div>

                                        {selectedLabResult.labResultResponse.note && selectedLabResult.labResultResponse.note.trim() !== '' && (
                                            <div className="mb-3">
                                                <strong>Ghi ch√∫:</strong>
                                                <div className="mt-1 p-3 bg-light rounded">
                                                    {selectedLabResult.labResultResponse.note}
                                                </div>
                                            </div>
                                        )}

                                        {selectedLabResult.labResultResponse.explanation && selectedLabResult.labResultResponse.explanation.trim() !== '' && (
                                            <div className="mb-3">
                                                <strong>Gi·∫£i th√≠ch:</strong>
                                                <div className="mt-1 p-3 bg-light rounded">
                                                    {selectedLabResult.labResultResponse.explanation}
                                                </div>
                                            </div>
                                        )}
                                    </Card.Body>
                                </Card>
                            ) : (
                                <Alert variant="info" className="text-center">
                                    <FileText size={48} className="mb-3" />
                                    <h6>Ch∆∞a c√≥ k·∫øt qu·∫£</h6>
                                    <p className="mb-0">K·∫øt qu·∫£ x√©t nghi·ªám ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t</p>
                                </Alert>
                            )}
                        </div>
                    ) : (
                        <Alert variant="danger" className="text-center">
                            <X size={48} className="mb-3" />
                            <h6>Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu</h6>
                            <p className="mb-0">Kh√¥ng th·ªÉ t·∫£i th√¥ng tin k·∫øt qu·∫£ x√©t nghi·ªám</p>
                        </Alert>
                    )}
                </Modal.Body>
                <Modal.Footer>
                    <Button variant="secondary" onClick={() => setShowResultModal(false)}>
                        ƒê√≥ng
                    </Button>
                </Modal.Footer>
            </Modal>
        </div>
    );
};

export default ExaminationDetailPage